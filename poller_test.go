package promquery

import "testing"

func TestCalcStdDev(t *testing.T) {
	p := Poller{}

	tests := []struct {
		name    string
		values  []string
		stdDev  float64
		lastVal float64
	}{
		{
			name: "check for NaN stddev calcuation",
			values: []string{
				"0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666",
				"0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666",
				"0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666",
				"0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666",
				"0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666",
				"0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666",
				"0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666",
				"0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666",
				"0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666",
				"0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666",
				"0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666",
				"0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666", "0.16666666666666666",
			},
			stdDev:  float64(0.0),
			lastVal: float64(0.16666666666666666),
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			stdDev, lastVal, err := p.calcStdDev(tt.values)

			if err != nil {
				t.Errorf("received error running test: %+v", err)
			}
			if stdDev != tt.stdDev {
				t.Errorf("std dev failure, expected: %e, got: %e", tt.stdDev, stdDev)
			}
			if lastVal != tt.lastVal {
				t.Errorf("length failure, expected: %f, got: %f", tt.lastVal, lastVal)
			}

		})

	}
}
